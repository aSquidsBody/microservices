YAML FILE:
    '-' (dash) means array element,
    e.g.
        - name: my_name
          image: my_image
        - name: my_other_name
          image: my_other_image
    
    '---' (triple dash) for distinct objects in one yaml file

COMMON KUBERNETES COMMANDs
    'kubectl apply -f <config_file_name>': tells kubernetes to process the config

    'kubectl get pods': list out pods
    'kubectl exec -it <pod_name> <cmd>': run command in pod
    'kubectl logs <pod_name>': print logs (console messages and logs)
    'kubectl delete pod <pod_name>': deletes pod
    'kubectl describe pod <pod_name>': print out pod info

    'kubectl get deployments': list out deployments
    'kubectl exec -it <deployment_name> <cmd>': run command in deployment_name
    'kubectl delete deployment <deployment_name>': deletes deployment
    'kubectl describe deployment <deployment_name>': print out deployment info

    in general, 'kubectl get <kind>' returns all running objects of that 'kind'.

VERSION CONTROL & UPDATES & DEPLOYMENTS
    1. Build docker images with defaul 'latest' tag
    2. Push docker images to dockerhub using 'docker push <image_name>'
    3. Restart the deployment 'kubectl rollout restart deployment <deployment_name>

NETWORKING:
    Cluster IP: sets up URL to access a pod. Only exposes pods in the Cluster
    Node Port: (For dev only) used to access pods from OUTSIDE the Cluster
    Load Balancer: Makes a pod available from outside the outside world
    External Name: Redirects an in-cluster request to a CNAME url.

NodePort Service:

    kind: Service
    spec:
        type: NodePort

    When listed:
        'posts-srv    NodePort    10.97.246.43   <none>        4000:31611/TCP   9s',
        the 4000 is the port *in the kubernetes node* which the NodePort Service will direct to the pod (direct to port 4000 in the pod).
        the 31611 is nodePort which we use to connect to the NodePort from outside the node.
        * Client uses port 31611 (nodePort)
        * Data enters the node
        * the node passes the data to Port 4000 of the Node Port Service
        * the Node Port Service passes the data to targetPort 4000 of the pod (targetPort defined in yaml).

ClusterIP (expose a pod to other pods in the cluster)
    Since this service is attached to a single pod (each pod get's their own ClusterIP), we added this
    service config to the deployment yaml for each app (i.e. event-bus-depl.yaml configs both the deployment
    object for event-bus and the cluster IP)

    kind: Service
    spec:
        type: ClusterIP

    If a different pod needs to access that IP, the use the name of the ClusterIP (and port), e.g., if 
    app_one is listening on port 5000 with ClusterIP 'app-one-srv', then a pod could reach the app
    with the url 'http://app-one-srv:5000/'

Load Balancer Service:
    Gets traffic to a single pod.

    - use ingress-nginx (open source project) to create the Load Balancer Service & Ingress

Ingress (and Ingress Controller):
    A pod with a set of routing rules to distriute traffic to other services.

    - use ingress-nginx (open source project) to create the Load Balancer Service & Ingress

Load Balancer Service & Ingress:
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.45.0/deploy/static/provider/cloud/deploy.yaml

    Update hosts  (development)
        * for windows (C:\Windows\System32\drivers\etc\hosts)
        * for mac (/etc/hosts)
            - append '127.0.0.1 posts.com' to end of file. Note you need open notepad as administrator.
            - Now if you go to posts.com/posts/ the browser runs a get request and the result should show up.

AUTOMATE TASKS IN DEV:
Skaffold:
    * Makes it easy to update code in a running pod
    * Makes it easy to create/delete all objects tied to a project as once
    * skaffold.dev

    1. Add skaffold.yaml to root directory (blog in first project)
    2. Add config to it (see one in first_project\blog)
    3. Run 'skaffold dev' in the directory which contains the skaffold.yaml file